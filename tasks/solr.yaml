---
- name: Create program directory for Solr 
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: solr
    group: solr
    mode: "0755"
  with_items:
    - "{{ solr.prefix.bin }}"

- name: Download Solr {{ solr.version }}
  ansible.builtin.get_url:
    url: "https://archive.apache.org/dist/{{ solr_path_segment }}/solr/{{ solr.version }}/solr-{{ solr.version }}.tgz"
    dest: "{{ solr.prefix.bin }}/solr-{{ solr.version }}.tar.gz"
    checksum: "{{ checksum_version }}:https://archive.apache.org/dist/{{ solr_path_segment }}/solr/{{ solr.version }}/solr-{{ solr.version }}.tgz.{{ checksum_version }}"
    owner: solr
    group: solr
    mode: "0644"
  vars:
    solr_path_segment: "{{ 'solr' if solr.version[0] is ansible.builtin.version('9', '>=') else 'lucene' }}"
    checksum_version: "{{ 'sha512' if solr.version[0] is ansible.builtin.version('9', '>=') else 'sha1' }}"
  register: solr_get_url_result

- name: Ignore unrecognized JVM options (for versions older than 9)
  notify: Restart Solr
  when: solr.version[0] is ansible.builtin.version('9', '<')
  ansible.builtin.template:
    dest: "/etc/rc.d/solr"
    src: "rc.d/solr"
    owner: root
    mode: "0755"

- name: Don't ignore unrecognized JVM options (for versions newer than 9)
  notify: Restart Solr
  when: solr.version[0] is ansible.builtin.version('9', '>=')
  ansible.builtin.file:
    path: "/etc/rc.d/solr"
    state: absent

- name: Check if {{ solr.prefix.bin }}/bin exists
  register: solr_bin_exists
  ansible.builtin.stat:
    path: "{{ solr.prefix.bin }}/bin"

- name: Handle Solr update
  when: solr_get_url_result.changed
  block:
    - name: Stop Solr service
      ansible.builtin.service:
        name: solr
        state: stopped

    - name: Kill all solr processes
      changed_when: yes
      ansible.builtin.command:
        cmd: "killall -u solr"

    - name: Remove old Solr version
      changed_when: yes
      ansible.builtin.command:
        cmd: >-
          find {{ item | quote }} -mindepth 1 -not -name solr-{{ solr.version | quote }}.tar.gz -delete
      with_items:
        - "{{ solr.prefix.bin }}"

- name: Unarchive Solr
  when: solr_get_url_result.changed or not solr_bin_exists.stat.exists
  notify: Restart Solr
  ignore_errors: "{{ ansible_check_mode }}"
  ansible.builtin.unarchive:
    src: "{{ solr.prefix.bin }}/solr-{{ solr.version }}.tar.gz"
    owner: solr
    group: solr
    dest: "{{ item }}"
    extra_opts:
      - --strip-components=1
    remote_src: yes
  with_items:
    - "{{ solr.prefix.bin }}"


- name: Sync Solr config
  ansible.posix.synchronize:
    src: "{{ solr.synced_config }}/"
    dest: "{{ item }}"
    rsync_opts:
      - --chown=solr:solr
      - --no-times
      - --checksum
    use_ssh_args: yes
  with_items:
    - "{{ solr.prefix.var }}"
  when: solr.synced_config
  notify: Restart Solr

- name: Enable Solr service
  ansible.builtin.lineinfile:
    path: "{{ item }}"
    regexp: "^solr_enable="
    line: 'solr_enable="YES"'
  with_items:
    - /etc/rc.conf
  notify: Start Solr
